(defun example1 ()
	(let* ((C nil) (D nil) (root 'D) (nodes '(C D)))
	(setf (get 'C 'parent) 'D)
	(setf (get 'C 'children) nil)
	(setf (get 'C 'instatiated) nil)
	(setf (get 'C 'cpt) (make-array '(2 2) :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'C 'probabilities) (make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'C 'lambda-values) (make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'C 'lambda-messages) (make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'C 'pi-values) (make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'C 'pi-messages) (make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (aref (get 'C 'cpt) 0 0 ) '.5d0)
	(setf (aref (get 'C 'cpt) 0 1 ) '.25d0)
	(setf (aref (get 'C 'cpt) 1 0 ) '.5d0)
	(setf (aref (get 'C 'cpt) 1 1 ) '.75d0)
	(setf (get 'D 'parent) nil)
	(setf (get 'D 'children) '(C))
	(setf (get 'D 'instantiated) nil)
	(setf (get 'D 'cpt) (make-array '2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'D 'probabilities) (make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (aref (get 'D 'cpt) 0 ) '.9d0)
	(setf (aref (get 'D 'cpt) 1 ) '.1d0)
	(display-network nodes)
	(initialize nodes)
	(display-network nodes)))
	
(defun example2()
	(let*  ((A nil) (B nil) (C nil) (D nil) (root 'A) (nodes '(A B C D)))
	(setf (get 'A 'parent) 'nil)
	(setf (get 'A 'children) '(B D))
	(setf (get 'A 'instantiated) nil)
	(setf (get 'A 'cpt)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'A 'probs)(make-array 2 :element-type 'double-float :initial-element 0.0d0))					
	(setf (get 'A 'lambda-values)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'A 'lambda-messages)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'A 'pi-values)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'A 'pi-messages)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (aref (get 'A 'cpt) 0 ) '.1d0)
	(setf (aref (get 'A 'cpt) 1 ) '.9d0) 
	(setf (get 'B 'parent) 'A)
	(setf (get 'B 'children) '(C))
	(setf (get 'B 'instantiated) nil)
	(setf (get 'B 'cpt)(make-array '(2 2) :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'B 'probs)(make-array 2 :element-type 'double-float :initial-element 0.0d0))					
	(setf (get 'B 'lambda-values)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'B 'lambda-messages)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'B 'pi-values)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'B 'pi-messages)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (aref (get 'B 'cpt) 0 0 ) '.7d0)
	(setf (aref (get 'B 'cpt) 0 1 ) '.2d0)				
	(setf (aref (get 'B 'cpt) 1 0 ) '.3d0)				
	(setf (aref (get 'B 'cpt) 1 1 ) '.8d0)
	(setf (get 'C 'parent) 'B)
	(setf (get 'C 'children) nil)
	(setf (get 'C 'instantiated) nil)
	(setf (get 'C 'cpt)(make-array '(2 2) :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'C 'probs)(make-array 2 :element-type 'double-float :initial-element 0.0d0))					
	(setf (get 'C 'lambda-values)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'C 'lambda-messages)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'C 'pi-values)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'C 'pi-messages)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (aref (get 'C 'cpt) 0 0 ) '.4d0)
	(setf (aref (get 'C 'cpt) 0 1 ) '.001d0)				
	(setf (aref (get 'C 'cpt) 1 0 ) '.6d0)				
	(setf (aref (get 'C 'cpt) 1 1 ) '.999d0)
	(setf (get 'D 'parent) 'A)
	(setf (get 'D 'children) nil)
	(setf (get 'D 'instantiated) nil)
	(setf (get 'D 'cpt)(make-array '(2 2) :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'D 'probs)(make-array 2 :element-type 'double-float :initial-element 0.0d0))					
	(setf (get 'D 'lambda-values)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'D 'lambda-messages)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'D 'pi-values)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (get 'D 'pi-messages)(make-array 2 :element-type 'double-float :initial-element 0.0d0))
	(setf (aref (get 'D 'cpt) 0 0 ) '.8d0)
	(setf (aref (get 'D 'cpt) 0 1 ) '.4d0)				
	(setf (aref (get 'D 'cpt) 1 0 ) '.2d0)				
	(setf (aref (get 'D 'cpt) 1 1 ) '.6d0)	
	(display-network nodes)
	(initialze nodes root)
	(display-network nodes)))

(defun initialize (nodes root)
	(cond ((not (null nodes))
			(progn
				(dolist (this nodes) (dotimes (x (array-dimension (get this 'lambda-values) 0)) (setf (aref (get this 'lambda-messages) x) 1)
																		    (setf (aref (get this 'lambda-values) x) 1)))
				(dotimes (x (array-dimension (get root 'lambda-values) 0)) (setf (aref (get root 'lambda-messages) x ) 1)
																		(setf (aref (get root 'lambda-values) x ) 1)
																		(setf (aref (get root 'pi-values) x )  (aref (get root 'cpt) x))
																		(setf (aref (get root 'probs) x ) (aref (get root 'cpt) x)))
				(dolist (child (get root 'children))
							(operative-two child)
							(update-c child))))
		  (t (format t "no nodes to initialize"))))

(defun display-network (nodes)
	(cond ((not (null nodes))
			(dolist (this nodes)
				(progn
					(format t "~a ~%" this)
					(format t "instatantiation ~a ~%" (get this 'instantiated))
					(format t "cpt ~a ~%" (get this 'cpt))
					(format t "probabilities ~a ~%" (get this 'probabilities))
					(format t "lambda-values ~a ~%" (get this 'lambda-values))
					(format t "lambda-messages ~a ~%" (get this 'lambda-messages))
					(format t "pi-values ~a ~%" (get this 'pi-values))
					(format t "pi-messages ~a ~%" (get this 'pi-messages)))))
		  (t (format t "no network to display"))))

(defun instantiate (node value))

(defun operative-one (node))

(defun operative-two (node)
	(dotimes (x (array-dimension (get node 'pi-messages) 0)) 
		(cond 
			((equal 1 (aref (get (get node 'parent) 'probabilities) x)) (setf (aref (get node 'pi-messages) x) 1))
			(t (setf (aref (get node 'pi-messages) x) 
				(/ (aref (get (get node 'parent) 'probabilities) x) 
				   (aref (get node 'lambda-messages) x)))))))

(defun operative-three (node))

(defun operative-four (node))

(defun operative-five (node))

(defun update-a (node))

(defun update-b (node))

(defun update-c (node))



